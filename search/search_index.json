{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pyppium! Pyppium is a Appium-Python-Client wrapper for cross mobile testing. Project Motivation Pyppium has been developed focusing on the cross tests scenarios quality assurance . The most common issues are: - A lot of conditionals along the tests. - Duplicated screens to isolate the problem above. - A BaseScreen or a Helper created to repeat scenarios. Pyppium can help you saving your time reducing complexity, increasing efficiency and also avoiding these boring and repetitive work problems. How it works Pyppium is based on a technical layer that abstracts some Appium behaviours to help in QA handling. With Pyppium you will see: Screen Object Pattern with abstraction to fetch elements. Cross Mobile Testing focus with some utilities to commons problems. Focus on QA daily problems (like waits), configurations and some boilerplate. Special Thanks Pyppium count on many packages for trying to deliver a good framework. And of course, these packages are amazing! Appium-Python-Client PyYAML Pytest Assertpy Black Pytest-mock Pytest-cov Codecov Mkdocs Tox Mkdocs-material License The MIT License (MIT) Copyright (c) 2020 Leonardo Menezes Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Welcome to Pyppium!"},{"location":"#welcome-to-pyppium","text":"Pyppium is a Appium-Python-Client wrapper for cross mobile testing.","title":"Welcome to Pyppium!"},{"location":"#project-motivation","text":"Pyppium has been developed focusing on the cross tests scenarios quality assurance . The most common issues are: - A lot of conditionals along the tests. - Duplicated screens to isolate the problem above. - A BaseScreen or a Helper created to repeat scenarios. Pyppium can help you saving your time reducing complexity, increasing efficiency and also avoiding these boring and repetitive work problems.","title":"Project Motivation"},{"location":"#how-it-works","text":"Pyppium is based on a technical layer that abstracts some Appium behaviours to help in QA handling. With Pyppium you will see: Screen Object Pattern with abstraction to fetch elements. Cross Mobile Testing focus with some utilities to commons problems. Focus on QA daily problems (like waits), configurations and some boilerplate.","title":"How it works"},{"location":"#special-thanks","text":"Pyppium count on many packages for trying to deliver a good framework. And of course, these packages are amazing! Appium-Python-Client PyYAML Pytest Assertpy Black Pytest-mock Pytest-cov Codecov Mkdocs Tox Mkdocs-material","title":"Special Thanks"},{"location":"#license","text":"The MIT License (MIT) Copyright (c) 2020 Leonardo Menezes Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"decorators-usage/","text":"Decorators Info Documentation is under construction.","title":"Decorators"},{"location":"decorators-usage/#decorators","text":"Info Documentation is under construction.","title":"Decorators"},{"location":"fetcher-usage/","text":"Fecther Info Documentation is under construction.","title":"Fecther"},{"location":"fetcher-usage/#fecther","text":"Info Documentation is under construction.","title":"Fecther"},{"location":"getting-started/","text":"QuickStart The fastest way to start using pyppium is learning the about basic pyppium driver and fetcher. Basic Usage of Pyppium Driver Create your capabilities as usual. caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } Import and add capabilities in pyppium driver init. from pyppium.driver import PyppiumDriver PyppiumDriver ( caps_android ) Quit driver after test run. PyppiumDriver . quit () Info The pyppium driver default url connects to http://localhost:4723/wd/hub , if you want to override send url parameter like this sample PyppiumDriver(\"http://my-url-here\", caps_android) Basic Usage of Fetcher Structure your screen with fetcher, this sample is about a login screen. from pyppium.fetcher import fetch , iOS , Android class ScreenOne : _button = fetch ( iOS ( \"id\" , \"buttonSignIn\" ), Android ( \"id\" , \"button\" )) _text_field = fetch ( iOS ( \"id\" , \"inputUserName\" ), Android ( \"id\" , \"username\" )) _text_password = fetch ( iOS ( \"id\" , \"InputPassword\" ), Android ( \"id\" , \"pass\" )) def login ( self , username , password ): self . _text_field . send_keys ( username ) self . _text_password . send_keys ( password ) self . _button . click () In this app the another screen is a welcome screen before login. from pyppium.fetcher import fetch , iOS , Android class ScreenTwo : _label = fetch ( iOS ( \"id\" , \"labelHello\" ), Android ( \"id\" , \"welcome_message\" )) def label_welcome_message ( self ): return self . _label . text Info The fetcher always wait element to be visible. Testing Create your test and use your screens and pyppium driver. def test_android_basic_behaviours (): username = \"Lully\" password = \"123456789\" caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } PyppiumDriver ( caps_android ) ScreenOne () . login ( username , password ) assert username in ScreenTwo () . label_welcome_message () PyppiumDriver . quit () Warning The fetcher module search element by platform in capabilities. He only search for Android or iOS , if platformName is android he looking for android element and if ios he looking for ios element.","title":"QuickStart"},{"location":"getting-started/#quickstart","text":"The fastest way to start using pyppium is learning the about basic pyppium driver and fetcher.","title":"QuickStart"},{"location":"getting-started/#basic-usage-of-pyppium-driver","text":"Create your capabilities as usual. caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } Import and add capabilities in pyppium driver init. from pyppium.driver import PyppiumDriver PyppiumDriver ( caps_android ) Quit driver after test run. PyppiumDriver . quit () Info The pyppium driver default url connects to http://localhost:4723/wd/hub , if you want to override send url parameter like this sample PyppiumDriver(\"http://my-url-here\", caps_android)","title":"Basic Usage of Pyppium Driver"},{"location":"getting-started/#basic-usage-of-fetcher","text":"Structure your screen with fetcher, this sample is about a login screen. from pyppium.fetcher import fetch , iOS , Android class ScreenOne : _button = fetch ( iOS ( \"id\" , \"buttonSignIn\" ), Android ( \"id\" , \"button\" )) _text_field = fetch ( iOS ( \"id\" , \"inputUserName\" ), Android ( \"id\" , \"username\" )) _text_password = fetch ( iOS ( \"id\" , \"InputPassword\" ), Android ( \"id\" , \"pass\" )) def login ( self , username , password ): self . _text_field . send_keys ( username ) self . _text_password . send_keys ( password ) self . _button . click () In this app the another screen is a welcome screen before login. from pyppium.fetcher import fetch , iOS , Android class ScreenTwo : _label = fetch ( iOS ( \"id\" , \"labelHello\" ), Android ( \"id\" , \"welcome_message\" )) def label_welcome_message ( self ): return self . _label . text Info The fetcher always wait element to be visible.","title":"Basic Usage of Fetcher"},{"location":"getting-started/#testing","text":"Create your test and use your screens and pyppium driver. def test_android_basic_behaviours (): username = \"Lully\" password = \"123456789\" caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } PyppiumDriver ( caps_android ) ScreenOne () . login ( username , password ) assert username in ScreenTwo () . label_welcome_message () PyppiumDriver . quit () Warning The fetcher module search element by platform in capabilities. He only search for Android or iOS , if platformName is android he looking for android element and if ios he looking for ios element.","title":"Testing"},{"location":"installation/","text":"Installation Pip You can install pyppium using pip as usual. pip install pyppium GitHub Or you can use github repository like samples below. Latest Version pip install git+https://github.com/leomenezessz/pyppium Tagged Version pip install git+https://github.com/leomenezessz/pyppium@v0.1.1","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#pip","text":"You can install pyppium using pip as usual. pip install pyppium","title":"Pip"},{"location":"installation/#github","text":"Or you can use github repository like samples below.","title":"GitHub"},{"location":"installation/#latest-version","text":"pip install git+https://github.com/leomenezessz/pyppium","title":"Latest Version"},{"location":"installation/#tagged-version","text":"pip install git+https://github.com/leomenezessz/pyppium@v0.1.1","title":"Tagged Version"},{"location":"pyppium-driver-usage/","text":"Pyppium Driver Info Documentation is under construction.","title":"Pyppium Driver"},{"location":"pyppium-driver-usage/#pyppium-driver","text":"Info Documentation is under construction.","title":"Pyppium Driver"}]}